{"remainingRequest":"/Users/johnchan/Documents/github/z-progress-loading/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/johnchan/Documents/github/z-progress-loading/src/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/johnchan/Documents/github/z-progress-loading/src/index.vue","mtime":1584525048422},{"path":"/Users/johnchan/Documents/github/z-progress-loading/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/johnchan/Documents/github/z-progress-loading/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/johnchan/Documents/github/z-progress-loading/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/johnchan/Documents/github/z-progress-loading/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmNvbnN0IGlzTm9WYWx1ZSA9ICh2YWx1ZSkgPT4gewogIHJldHVybiB2YWx1ZSA9PT0gdm9pZCAwIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSAnJzsKfTsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnei1wcm9ncmVzcy1sb2FkaW5nJywKICBwcm9wczogWydwcm9ncmVzcycsICdzdGFydCcsICdjb25maWcnXSwKICB3YXRjaDogewogICAgc3RhcnQodmFsdWUpIHsKICAgICAgaWYgKHZhbHVlKSB7CiAgICAgICAgdGhpcy5zdGFydExvYWRpbmcoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnN0b3BMb2FkaW5nKCk7CiAgICAgIH0KICAgIH0sCiAgICBjb25maWc6IHsKICAgICAgZGVlcDogdHJ1ZSwKICAgICAgaGFuZGxlcigpIHsKICAgICAgICB0aGlzLmluaXQoKTsKICAgICAgfSwKICAgIH0sCiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgd2lkdGg6IDAsCiAgICAgIGhlaWdodDogMCwKICAgICAgZWxlbVdpZHRoOiA0LAogICAgICBlbGVtTWluV2lkdGg6IDIsCiAgICAgIGVsZW1NYXhXaWR0aDogOCwKICAgICAgZWxlbU1pbkhlaWdodDogNCwKICAgICAgZWxlbU1heEhlaWdodDogMjQsCiAgICAgIGVsZW1EZWx0YUhlaWdodDogMywKICAgICAgc3BhY2luZzogNSwKICAgICAgYmdDb2xvcjogJ2JsdWUnLAogICAgICBmb3JlQ29sb3I6ICdjeWFuJywKICAgICAgc3RlcDogMSwKICAgICAgcmVjdHM6IFtdLAogICAgICByZWN0Q291bnQ6IDAsCiAgICAgIHJhZjogbnVsbCwKICAgIH07CiAgfSwKICBtb3VudGVkKCkgewogICAgdGhpcy5pbml0KCk7CiAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgdGhpcy5kcmF3KCk7CiAgICB9LCAwKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGluaXQoKSB7CiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd6LXByb2dyZXNzLWxvYWRpbmcnKTsKICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgICAgIHRoaXMud2lkdGggPSB3aWR0aCAtICg4ICogMik7CiAgICAgIHRoaXMuc3BhY2luZyA9IE1hdGguZmxvb3IodGhpcy53aWR0aCAqIDAuMDM1KTsKICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgIHRoaXMuZWxlbVdpZHRoID0gTWF0aC5mbG9vcih0aGlzLndpZHRoICogMC4wMik7CiAgICAgIGlmICh0aGlzLmVsZW1XaWR0aCA8IHRoaXMuZWxlbU1pbldpZHRoKSB7CiAgICAgICAgdGhpcy5lbGVtV2lkdGggPSB0aGlzLmVsZW1NaW5XaWR0aDsKICAgICAgfQogICAgICBpZiAodGhpcy5lbGVtV2lkdGggPiB0aGlzLmVsZW1NYXhXaWR0aCkgewogICAgICAgIHRoaXMuZWxlbVdpZHRoID0gdGhpcy5lbGVtTWF4V2lkdGg7CiAgICAgIH0KICAgICAgdGhpcy5lbGVtTWluSGVpZ2h0ID0gdGhpcy5lbGVtV2lkdGg7CiAgICAgIHRoaXMuZWxlbU1heEhlaWdodCA9IE1hdGguZmxvb3IodGhpcy5oZWlnaHQgKiAwLjc1KTsKICAgICAgdGhpcy5lbGVtRGVsdGFIZWlnaHQgPSBNYXRoLmZsb29yKCh0aGlzLmVsZW1NYXhIZWlnaHQgLSB0aGlzLmVsZW1NaW5IZWlnaHQpIC8gNik7CiAgICAgIC8vIC0tc3RhcnQtLSDkuKrmgKfljJbphY3nva4KICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWcgfHwge307CiAgICAgIHRoaXMuZWxlbVdpZHRoID0gTnVtYmVyKGNvbmZpZy5lbGVtV2lkdGgpIHx8IHRoaXMuZWxlbVdpZHRoOwogICAgICB0aGlzLmVsZW1NaW5IZWlnaHQgPSBOdW1iZXIoY29uZmlnLmVsZW1NaW5IZWlnaHQpIHx8IHRoaXMuZWxlbU1pbkhlaWdodDsKICAgICAgdGhpcy5lbGVtTWF4SGVpZ2h0ID0gTnVtYmVyKGNvbmZpZy5lbGVtTWF4SGVpZ2h0KSB8fCB0aGlzLmVsZW1NYXhIZWlnaHQ7CiAgICAgIGNvbnNvbGUubG9nKGNvbmZpZy5lbGVtRGVsdGFIZWlnaHQsIHR5cGVvZiBjb25maWcuZWxlbURlbHRhSGVpZ2h0KTsKICAgICAgaWYgKCFpc05vVmFsdWUoY29uZmlnLmVsZW1EZWx0YUhlaWdodCkpIHsKICAgICAgICBjb25zdCBlbGVtRGVsdGFIZWlnaHQgPSBOdW1iZXIoY29uZmlnLmVsZW1EZWx0YUhlaWdodCk7CiAgICAgICAgdGhpcy5lbGVtRGVsdGFIZWlnaHQgPSAhaXNOYU4oZWxlbURlbHRhSGVpZ2h0KSA/IGVsZW1EZWx0YUhlaWdodCA6IHRoaXMuZWxlbURlbHRhSGVpZ2h0OwogICAgICB9CiAgICAgIGlmICghaXNOb1ZhbHVlKGNvbmZpZy5zcGFjaW5nKSkgewogICAgICAgIGNvbnN0IHNwYWNpbmcgPSBOdW1iZXIoY29uZmlnLnNwYWNpbmcpOwogICAgICAgIHRoaXMuc3BhY2luZyA9ICFpc05hTihzcGFjaW5nKSA/IHNwYWNpbmcgOiB0aGlzLnNwYWNpbmc7CiAgICAgIH0KICAgICAgdGhpcy5iZ0NvbG9yID0gY29uZmlnLmJnQ29sb3IgfHwgdGhpcy5iZ0NvbG9yOwogICAgICB0aGlzLmZvcmVDb2xvciA9IGNvbmZpZy5mb3JlQ29sb3IgfHwgdGhpcy5mb3JlQ29sb3I7CiAgICAgIHRoaXMuc3RlcCA9IE51bWJlcihjb25maWcuc3RlcCkgfHwgdGhpcy5zdGVwOwogICAgICAvLyAtLWVuZC0tCiAgICAgIHRoaXMucmVjdHMgPSBbXTsKICAgICAgdGhpcy5yZWN0Q291bnQgPSBNYXRoLmZsb29yKAogICAgICAgICh0aGlzLndpZHRoICsgdGhpcy5zcGFjaW5nKSAvICh0aGlzLmVsZW1XaWR0aCArIHRoaXMuc3BhY2luZykKICAgICAgKTsKICAgICAgbGV0IGN1ckhlaWdodCA9IHRoaXMuZWxlbU1pbkhlaWdodDsKICAgICAgbGV0IGRlbHRhID0gLXRoaXMuZWxlbURlbHRhSGVpZ2h0OwogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucmVjdENvdW50OyBpICs9IDEpIHsKICAgICAgICBjb25zdCB4ID0gaSAqICh0aGlzLmVsZW1XaWR0aCArIHRoaXMuc3BhY2luZyk7CiAgICAgICAgY29uc3QgeSA9IHRoaXMuaGVpZ2h0IC8gMiAtIGN1ckhlaWdodCAvIDI7CiAgICAgICAgY29uc3QgaGVpZ2h0ID0gY3VySGVpZ2h0OwogICAgICAgIGlmICgKICAgICAgICAgIGN1ckhlaWdodCArIGRlbHRhIDwgdGhpcy5lbGVtTWF4SGVpZ2h0ICYmCiAgICAgICAgICBjdXJIZWlnaHQgKyBkZWx0YSA+IHRoaXMuZWxlbU1pbkhlaWdodAogICAgICAgICkgewogICAgICAgICAgY3VySGVpZ2h0ICs9IGRlbHRhOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBkZWx0YSA9IC1kZWx0YTsKICAgICAgICAgIGN1ckhlaWdodCArPSBkZWx0YTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZmlsbFN0eWxlID0KICAgICAgICAgIGkgLyB0aGlzLnJlY3RDb3VudCA8IHRoaXMucHJvZ3Jlc3MgLyAxMDAKICAgICAgICAgICAgPyB0aGlzLmZvcmVDb2xvcgogICAgICAgICAgICA6IHRoaXMuYmdDb2xvcjsKICAgICAgICB0aGlzLnJlY3RzLnB1c2goewogICAgICAgICAgeCwKICAgICAgICAgIHksCiAgICAgICAgICB3aWR0aDogdGhpcy5lbGVtV2lkdGgsCiAgICAgICAgICBoZWlnaHQsCiAgICAgICAgICBmaWxsU3R5bGUsCiAgICAgICAgICBkaXI6IGRlbHRhLAogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgdXBkYXRlUmVjdHMoKSB7CiAgICAgIHRoaXMucmVjdHMgPSB0aGlzLnJlY3RzLm1hcCgocmVjdCwgaW5kZXgpID0+IHsKICAgICAgICBsZXQgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBmaWxsU3R5bGUsIGRpciB9ID0gcmVjdDsKICAgICAgICBsZXQgZGVsdGEgPSBkaXIgPiAwID8gdGhpcy5zdGVwIDogLXRoaXMuc3RlcDsKICAgICAgICBpZiAoCiAgICAgICAgICBoZWlnaHQgKyBkZWx0YSA8IHRoaXMuZWxlbU1heEhlaWdodCAmJgogICAgICAgICAgaGVpZ2h0ICsgZGVsdGEgPiB0aGlzLmVsZW1NaW5IZWlnaHQKICAgICAgICApIHsKICAgICAgICAgIGhlaWdodCArPSBkZWx0YTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGVsdGEgPSAtZGVsdGE7CiAgICAgICAgICBoZWlnaHQgKz0gZGVsdGE7CiAgICAgICAgfQogICAgICAgIHkgPSB0aGlzLmhlaWdodCAvIDIgLSBoZWlnaHQgLyAyOwogICAgICAgIGZpbGxTdHlsZSA9CiAgICAgICAgICBpbmRleCAvIHRoaXMucmVjdENvdW50IDwgdGhpcy5wcm9ncmVzcyAvIDEwMAogICAgICAgICAgICA/IHRoaXMuZm9yZUNvbG9yCiAgICAgICAgICAgIDogdGhpcy5iZ0NvbG9yOwogICAgICAgIHJldHVybiB7IHgsIHksIHdpZHRoLCBoZWlnaHQsIGZpbGxTdHlsZSwgZGlyOiBkZWx0YSB9OwogICAgICB9KTsKICAgIH0sCiAgICBkcmF3KCkgewogICAgICBjb25zdCByZWYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnei1wcm9ncmVzcy1sb2FkaW5nLWNhbnZhcycpOwogICAgICBjb25zdCBjdHggPSByZWYuZ2V0Q29udGV4dCgnMmQnKTsKICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7CiAgICAgIHRoaXMucmVjdHMuZm9yRWFjaChyZWN0ID0+IHsKICAgICAgICBjb25zdCB7IHgsIHksIHdpZHRoLCBoZWlnaHQsIGZpbGxTdHlsZSB9ID0gcmVjdDsKICAgICAgICBjdHguZmlsbFN0eWxlID0gZmlsbFN0eWxlOwogICAgICAgIGN0eC5maWxsUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTsKICAgICAgfSk7CiAgICB9LAogICAgc3RhcnRMb2FkaW5nKCkgewogICAgICB0aGlzLnVwZGF0ZVJlY3RzKCk7CiAgICAgIHRoaXMuZHJhdygpOwogICAgICB0aGlzLnJhZiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnN0YXJ0TG9hZGluZy5iaW5kKHRoaXMpKTsKICAgIH0sCiAgICBzdG9wTG9hZGluZygpIHsKICAgICAgaWYgKHRoaXMucmFmKSB7CiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5yYWYpOwogICAgICAgIHRoaXMucmFmID0gbnVsbDsKICAgICAgfQogICAgfSwKICB9LAp9Owo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"z-progress-loading\">\n    <canvas id=\"z-progress-loading-canvas\" :width=\"width\" :height=\"height\">\n      <i>Not supported.</i>\n    </canvas>\n  </div>\n</template>\n\n<script>\nconst isNoValue = (value) => {\n  return value === void 0 || value === null || value === '';\n};\n\nexport default {\n  name: 'z-progress-loading',\n  props: ['progress', 'start', 'config'],\n  watch: {\n    start(value) {\n      if (value) {\n        this.startLoading();\n      } else {\n        this.stopLoading();\n      }\n    },\n    config: {\n      deep: true,\n      handler() {\n        this.init();\n      },\n    },\n  },\n  data() {\n    return {\n      width: 0,\n      height: 0,\n      elemWidth: 4,\n      elemMinWidth: 2,\n      elemMaxWidth: 8,\n      elemMinHeight: 4,\n      elemMaxHeight: 24,\n      elemDeltaHeight: 3,\n      spacing: 5,\n      bgColor: 'blue',\n      foreColor: 'cyan',\n      step: 1,\n      rects: [],\n      rectCount: 0,\n      raf: null,\n    };\n  },\n  mounted() {\n    this.init();\n    setTimeout(() => {\n      this.draw();\n    }, 0);\n  },\n  methods: {\n    init() {\n      const container = document.getElementById('z-progress-loading');\n      const { width, height } = container.getBoundingClientRect();\n      this.width = width - (8 * 2);\n      this.spacing = Math.floor(this.width * 0.035);\n      this.height = height;\n      this.elemWidth = Math.floor(this.width * 0.02);\n      if (this.elemWidth < this.elemMinWidth) {\n        this.elemWidth = this.elemMinWidth;\n      }\n      if (this.elemWidth > this.elemMaxWidth) {\n        this.elemWidth = this.elemMaxWidth;\n      }\n      this.elemMinHeight = this.elemWidth;\n      this.elemMaxHeight = Math.floor(this.height * 0.75);\n      this.elemDeltaHeight = Math.floor((this.elemMaxHeight - this.elemMinHeight) / 6);\n      // --start-- 个性化配置\n      const config = this.config || {};\n      this.elemWidth = Number(config.elemWidth) || this.elemWidth;\n      this.elemMinHeight = Number(config.elemMinHeight) || this.elemMinHeight;\n      this.elemMaxHeight = Number(config.elemMaxHeight) || this.elemMaxHeight;\n      console.log(config.elemDeltaHeight, typeof config.elemDeltaHeight);\n      if (!isNoValue(config.elemDeltaHeight)) {\n        const elemDeltaHeight = Number(config.elemDeltaHeight);\n        this.elemDeltaHeight = !isNaN(elemDeltaHeight) ? elemDeltaHeight : this.elemDeltaHeight;\n      }\n      if (!isNoValue(config.spacing)) {\n        const spacing = Number(config.spacing);\n        this.spacing = !isNaN(spacing) ? spacing : this.spacing;\n      }\n      this.bgColor = config.bgColor || this.bgColor;\n      this.foreColor = config.foreColor || this.foreColor;\n      this.step = Number(config.step) || this.step;\n      // --end--\n      this.rects = [];\n      this.rectCount = Math.floor(\n        (this.width + this.spacing) / (this.elemWidth + this.spacing)\n      );\n      let curHeight = this.elemMinHeight;\n      let delta = -this.elemDeltaHeight;\n      for (let i = 0; i < this.rectCount; i += 1) {\n        const x = i * (this.elemWidth + this.spacing);\n        const y = this.height / 2 - curHeight / 2;\n        const height = curHeight;\n        if (\n          curHeight + delta < this.elemMaxHeight &&\n          curHeight + delta > this.elemMinHeight\n        ) {\n          curHeight += delta;\n        } else {\n          delta = -delta;\n          curHeight += delta;\n        }\n        const fillStyle =\n          i / this.rectCount < this.progress / 100\n            ? this.foreColor\n            : this.bgColor;\n        this.rects.push({\n          x,\n          y,\n          width: this.elemWidth,\n          height,\n          fillStyle,\n          dir: delta,\n        });\n      }\n    },\n    updateRects() {\n      this.rects = this.rects.map((rect, index) => {\n        let { x, y, width, height, fillStyle, dir } = rect;\n        let delta = dir > 0 ? this.step : -this.step;\n        if (\n          height + delta < this.elemMaxHeight &&\n          height + delta > this.elemMinHeight\n        ) {\n          height += delta;\n        } else {\n          delta = -delta;\n          height += delta;\n        }\n        y = this.height / 2 - height / 2;\n        fillStyle =\n          index / this.rectCount < this.progress / 100\n            ? this.foreColor\n            : this.bgColor;\n        return { x, y, width, height, fillStyle, dir: delta };\n      });\n    },\n    draw() {\n      const ref = document.getElementById('z-progress-loading-canvas');\n      const ctx = ref.getContext('2d');\n      ctx.clearRect(0, 0, this.width, this.height);\n      this.rects.forEach(rect => {\n        const { x, y, width, height, fillStyle } = rect;\n        ctx.fillStyle = fillStyle;\n        ctx.fillRect(x, y, width, height);\n      });\n    },\n    startLoading() {\n      this.updateRects();\n      this.draw();\n      this.raf = requestAnimationFrame(this.startLoading.bind(this));\n    },\n    stopLoading() {\n      if (this.raf) {\n        cancelAnimationFrame(this.raf);\n        this.raf = null;\n      }\n    },\n  },\n};\n</script>\n\n<style>\n#z-progress-loading {\n  width: 100%;\n  height: 100%;\n  padding: 0 8px;\n  flex: 1;\n  display: flex;\n  align-items: center;\n}\n#z-progress-loading-canvas {\n  flex: 1;\n}\n</style>\n"]}]}